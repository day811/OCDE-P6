Mission Partie 1 - Prédisez la consommation d'énergie des bâtiments
Comment allez-vous procéder ?
Barre

 

Cette mission suit un scénario de projet professionnel. 


Vous pouvez suivre les étapes pour vous aider à réaliser vos livrables.

Avant de démarrer, nous vous conseillons de :

lire toute la mission et ses documents liés ;
prendre des notes sur ce que vous avez compris ;
consulter les étapes pour vous guider ; 
préparer une liste de questions pour votre première session de mentorat.
Prêt à mener la mission ? 
Barre

 

Vous travaillez en tant que Data Engineer pour la ville de Seattle. Pour atteindre son objectif de ville neutre en émissions de carbone en 2050, votre équipe s’intéresse de près à la consommation et aux émissions des bâtiments non destinés à l’habitation.

 

                                                   Logo Seattle

 

Des relevés minutieux ont été effectués par les agents de la ville en 2016. Voici les données et leur source. Ces relevés sont coûteux à obtenir, et à partir de ceux déjà réalisés, vous voulez tenter de prédire les émissions de CO2 et la consommation totale d’énergie de bâtiments non destinés à l’habitation pour lesquels elles n’ont pas encore été mesurées.

 

Votre prédiction se basera sur les données structurelles des bâtiments (taille et usage des bâtiments, date de construction, situation géographique, ...).

 

Le Project Lead Douglas vous convie par message à une réunion de kick-off :

 

Comme tu le sais, ce genre de projet est mené en général par ta collègue Data Scientist Léa. Sauf qu’elle va partir en congé maternité à partir de la semaine prochaine. Ce projet a une très haute visibilité en ce moment auprès de la mairie de Seattle et nous ne pouvons pas attendre son retour pour commencer à travailler dessus. 

 

Afin de t’aider, je me suis coordonné avec Léa pour qu’elle te facilite le travail en te préparant un notebook avec un template de la démarche à suivre et des conseils pour éviter certains pièges. Dans l’ensemble, j’attends de toi :

une courte analyse exploratoire pour faire ressortir des insights clés sur les différents bâtiments ;
des tests des différents modèles supervisés visant à prédire la consommation en énergie des bâtiments ;
la détermination des facteurs principaux impactant le plus le modèle que tu auras sélectionné.
Étapes
ETAPE 1
Prérequis 

Avoir préparé un environnement virtuel Python avec tous les packages spécifiés dans la partie importation du notebook template.
Résultat attendu  

Le notebook template avec la partie "Analyse exploratoire” complétée.
Recommandations  

Bien lire tout d’abord l'énoncé pour se restreindre uniquement aux types pertinents de bâtiments.
Identifier les colonnes qui peuvent aider à repérer des bâtiments aberrants ou peu pertinents.
Il y a plusieurs colonnes candidates pouvant être une target de votre modèle. Il faut en choisir une pour tout le reste du projet.
Le libellé et le contenu de certaines colonnes vous aidera à comprendre pourquoi certaines valeurs manquantes existent et ce que vous devez en faire.
Bien choisir le type de graphique en fonction des features que vous voulez comparer (quanti vs quanti, quanti vs quali, quali vs quali, etc.).
Conserver une trace du nombre de lignes avant et après un filtrage/nettoyage de la donnée.
Identifier et supprimer des bâtiments avec des valeurs de features incohérentes. 
Points de vigilance  

Ne pas supprimer toutes les lignes où une colonne présente une valeur manquante car vous allez vous retrouver avec trop peu de bâtiments pour la partie modélisation.
Ne pas se précipiter vers l’analyse avant d’avoir bien compris le libellé et le contenu des colonnes.
Ressources 

Le chapitre Améliorez un jeu de données du cours d'initiation au ML.

ETAPE 2
Prérequis 

S'être familiarisé avec le jeu de données via l'analyse exploratoire.
Avoir compris ce qu'est le feature engineering en regardant les chapitres indiqués en ressources. 
Résultat attendu  

Le notebook template avec la partie "Feature Engineering” complétée.
Recommandations  

Nous vous déconseillons fortement d'utiliser des outils comme ChatGPT pour cette section. D'abord, parce que des erreurs se glissent dans les codes générés en feature engineering souvent d'une manière assez subtile et qu’en tant que débutants, vous ne les  détecterez pas. Par contre, l'évaluateur pourra les voir. Ensuite, car cette compétence ne s'apprend pas autrement que par la pratique, ce n'est donc pas dans votre intérêt de l'automatiser à ce stade de votre apprentissage. 

Si le code de l’analyse exploratoire est long, ne pas hésiter à créer un second notebook pour l’alléger.  
Essayer de couvrir, dans la création des features, plusieurs catégories d'informations du jeu de données (localisation, temporalité, structure du bâtiment, etc.)
Voici quelques pistes de réflexion pour le feature engineering:
Il peut être intéressant d'indiquer à un modèle si un bâtiment a plusieurs types d'usages via des features binaires ou des proportions.
Pour certaines features catégorielles à haute cardinalité, il peut être intéressant de créer des tranches de valeurs pour les compresser.
Les valeurs des sources d'énergies (gaz, électricité) ne peuvent pas être utilisées, car cela créerait du data leakage, mais rien ne nous empêche de créer des features indiquant quels types de sources d'énergie existent au sein de chaque bâtiment (ce sont des informations structurelles des bâtiments, indépendantes de l'intensité de la consommation en énergie).
Points de vigilance  

Attention au data leakage : on ne peut pas donner à un modèle de ML des features qui ne peuvent être calculées qu'en connaissant la consommation d'énergie, alors que c'est cette quantité qu'il faut prédire.
Se fixer à l'avance un certain nombre d'heures à ne pas dépasser sur cette partie. En effet, on pourrait infiniment réfléchir à rajouter de plus en plus de features avant de réaliser un 1er modèle. L’objectif ici est surtout de comprendre par la pratique l’importance du feature engineering. Vous ne serez pas jugé sur la performance de votre modèle sur ce projet.
Ressources 

La section Feature Engineering du chapitre Transformez les variables pour faciliter l'apprentissage du modèle du cours d'initiation.
La section Feature Engineering de ce cours avancé qui couvre quelques techniques classiques et le data leakage.
 

ETAPE 3
Prérequis 

Avoir complété l’étape 2.
Résultat attendu  

Avoir complété la partie “Préparation des features pour la modélisation” du notebook template.
Etre capable d'expliquer votre démarche et votre logique jusqu'ici. Demandez-vous quelle(s) question(s) on pourrait vous poser sur vos choix et comment vous pourriez y répondre.
Recommandations  

Si la méthode IQR ou z-score supprime trop de bâtiments outliers, utiliser des seuils sur la base de quantiles.
Dégager des tendances dans vos données (par exemple, quand la feature prend X valeurs, on observe tel comportement de la target).
Regarder l'ensemble des méthodes importées via scikit-learn par le template dans la section modélisation. Votre code utilisera ces méthodes.
Bien comprendre dans quelle situation on utilise un OneHotEncoder au lieu d'un LabelEncoder et vice-versa. Au besoin, consulter le chapitre indiqué dans la rubrique Ressources.
Points de vigilance  

Éviter de réduire significativement la taille de votre dataset en supprimant les valeurs extrêmes d’une distribution : il faut trouver le bon équilibre entre garder suffisamment de données pour entraîner votre modèle et supprimer des bâtiments avec des valeurs de features ou de target très hétérogènes.
Garder en tête que la matrice de corrélation n'est applicable que pour certains types de features.
Ne pas utiliser le OneHotEncoder sur une feature qualitative qui peut prendre énormément de valeurs différentes possibles. On peut utiliser l'argument max_categories de la fonction OneHotEncoder pour endiguer ce phénomène.
Ressources 

Le chapitre Transformez les variables pour faciliter l'apprentissage du modèle du cours d'initiation.

ETAPE 4
Prérequis 

Avoir compris : 
ce qu'est une séparation train-test et ce qu'est une validation croisée ;
comment utiliser un modèle de sklearn avec les méthodes fit() et predict() ;
ce qu'est l'overfit.
S'être familiarisé avec les métriques d'évaluation incontournables pour les algorithmes de régression (R2, MAE).
Résultat attendu  

Partie  “Comparaison de différents modèles supervisés” du notebook template complétée.
Recommandations  

Privilégier l'utilisation de la méthode cross_validate, déjà importée au début de la section modélisation du notebook template et regarder la documentation de scikit-learn sur cette méthode afin de bien l'adapter à votre usage.
En tant que Data Engineer, il n'est pas attendu que vous maitrisiez finement les différences entre les différents modèles que vous utilisez. Nous vous conseillons en revanche de comprendre dans les grandes lignes comment fonctionne une régression linéaire, et ce que signifie au sens large un modèle non-linéaire.

Commencer par un modèle linéaire, car il sera plus facile à comprendre.
Penser à fixer le random state afin de garantir la reproductibilité des résultats.
À ce stade, ce n’est pas la peine de toucher aux paramètres par défaut de chaque algorithme.
Une fois que vous vous êtes fixés sur votre approche de modélisation (quelles métriques d'évaluation, comment vous séparez en train-test etc.), réécrivez votre code au sein d'une fonction que vous pouvez appeler pour chaque modèle et qui réalise toute la démarche de modélisation d'un seul coup (nous appelons ceci du refactoring de code).
Points de vigilance  

Assurez-vous d'avoir le même nombre de lignes, d'utiliser les mêmes jeux de train et de test et d'utiliser les mêmes métriques pour évaluer les modèles, sinon vous comparez des choux et des carottes, car vous ne prenez pas les mêmes hypothèses pour chaque modélisation. 
Ressources 

La partie "Implémentez la validation croisée" du chapitre Augmentez la robustesse de vos modèles du cours d’initiation.
La dernière partie du chapitre 1 du cours avancé:  Mettez en place une séparation apprentissage-test cohérente
afin de comprendre les enjeux du scaling.
La documentation de la méthode cross_validate de scikit-learn.
L’article Random State in Sklearn and K-mean Clustering pour comprendre l'intérêt du random state.

ETAPE 5
Prérequis 

Avoir terminé l’étape 4.
Résultat attendu  

La partie “Optimisation et interprétation du modèle” du notebook template complétée. 
Recommandations  

Utiliser la méthode GridSearchCV importée plus haut dans le Notebook et regarder la documentation de scikit-learn sur cette méthode afin de bien l'adapter à votre usage.
Avant de lancer la Grid Search "à grande échelle", testez une petite grille de 10 combinaisons afin de vous assurer que votre code fonctionne. Il serait dommage de se rendre compte que votre code bugue au bout du test de l'avant-dernière combinaison et de perdre tout votre travail en conséquence !

Il est de coutume de lancer la Grid Search "à grande échelle" une fois que l'on a fini la journée de travail et de la laisser tourner pendant la soirée, puis de reprendre le lendemain avec les résultats qui nous attendent.
Il est coutume de représenter la feature importance sous forme d’un histogramme.
Points de vigilance  

Le calcul d'une GridSearch peut être extrêmement chronophage, limitez-vous à un maximum de 500 combinaisons différentes à tester, voire moins (100 minimum) si votre ordinateur n'est pas doté d'une puissance de calcul significative. Vous pouvez également utiliser Google Colab qui vous offre une puissance de calcul largement suffisante.

Ne pas s’intéresser à la feature importance avant d’avoir fini la phase d’optimisation du modèle. En effet, même un modèle avec des performances très légèrement supérieures peut avoir des features importances complètement différentes d’un autre modèle. Il n’y a pas de lien prévisible entre les performances et feature importance.
Ressources 

Le chapitre Augmentez la robustesse de vos modèles du cours d'initiation. 
La documentation de la méthode GridSearchCV.

ETAPE 6
Prérequis 

Avoir terminé l’étape 5.
Résultat attendu  

Une présentation au format PPT claire et professionnelle : 
présentant le contexte du projet ainsi que le contenu de la donnée ; 
résumant vos résultats d'analyse exploratoire ;
expliquant votre démarche de modélisation : 
Comment la donnée a été préparée au préalable
Comment vous avez évalué différents modèles
Comment vos features influencent votre modèle
Recommandations  

Partir du principe que l’audience ne suit pas le sujet d’aussi près que vous.

S’assurer que les graphiques (axes, titres, échelles et légendes) sont cohérents et adaptés au message qu’il faut transmettre.
Gagner du temps en présentant les groupes de features que vous avez (avec un exemple ou deux par groupe) plutôt que de présenter chaque feature individuellement.
S’assurer que les hypothèses de modélisations sont bien citées.
Résumer les métriques de performances des modèles dans un tableau pour améliorer la lisibilité.
Mettree en place une logique de storytelling : 
Veiller à ne pas présenter les résultats de façon scolaire.
Essayer de donner du sens métier aux résultats de modélisation. Par exemple : Au lieu de parler de MAE de 5000, vous pouvez dire que le modèle se trompe de plus ou moins 5000 dans son estimation de la consommation d'énergie.
Points de vigilance  

Restez le plus concis possible, vous avez peu de temps en soutenance pour rentrer dans le détail. 
Cet équilibre entre richesse de contenu et temps imparti peut être difficile à trouver, vous progresserez en gagnant en expérience. 

Ressources 

Le cours OpenClassrooms Communiquez et formalisez vos idées par le storytelling
Le cours OpenClassrooms Améliorez l'impact de vos présentations
